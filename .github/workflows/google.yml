# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and push docker image to gar

on:
  push:
    branches: [ "main" ]

env:
  PROJECT_ID: lofty-object-378217
  GAR_LOCATION: europe-west2 # TODO: update region of the Artifact Registry
  GKE_CLUSTER: stateful-gkeapp   # TODO: update to cluster name
  GKE_ZONE: europe-west2-a   # TODO: update to cluster zone
  DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  REPOSITORY: sonar-docker # TODO: update to Artifact Registry docker repository
  IMAGE: sonarqube

jobs:
  setup-build-publish-deploy:
    name: build and push docker image
    runs-on: ubuntu-latest
    environment: production

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # Configure Workload Identity Federation and generate an access token.
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v0'
      with:
        token_format: 'access_token'
        workload_identity_provider: 'projects/813165853992/locations/global/workloadIdentityPools/cicd-pool-git/providers/cicd-provider'
        service_account: 'github-sa@lofty-object-378217.iam.gserviceaccount.com'

    # Alternative option - authentication via credentials json
    #- id: 'auth'
    #  uses: 'google-github-actions/auth@v0'
    #  with:
    #    credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: Docker configuration
      run: |-
        echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev

        echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://gcr.io
    # Get the GKE credentials so we can deploy to the cluster
    #- name: Set up GKE credentials
    #  uses: google-github-actions/get-gke-credentials@v1
    #  with:
    #    cluster_name: ${{ env.GKE_CLUSTER }}
    #    location: ${{ env.GKE_ZONE }}
    - name: gcloud auth
      run: |-
        gcloud auth configure-docker

        gcloud auth configure-docker europe-west2-docker.pkg.dev

        gcloud auth configure-docker gcr.io

    # Build the Docker image
    - name: Build
      run: |-
        docker build .\
          --file /home/runner/work/GKE/GKE/sonarqube/Dockerfile \
          --tag "europe-west2-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
        
        docker image ls
          
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker image ls
        
        docker push europe-west2-docker.pkg.dev/lofty-object-378217/sonar-docker/sonarqube:latest